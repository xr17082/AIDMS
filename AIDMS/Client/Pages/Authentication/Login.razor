@page "/login"
@layout MainLayout
@using AIDMS.Shared.Application.Requests.Identity
@using System.Security.Claims
@attribute [AllowAnonymous]

<EditForm Model="@_tokenModel" OnValidSubmit="SubmitAsync">
    <FluentValidationValidator @ref="_fluentValidationValidator" />
    <MudGrid>
        <DataAnnotationsValidator />
        <MudItem xs="12">
            <div class="d-flex justify-center">
                <MudText Typo="Typo.h4">AI DMS</MudText>
            </div>
        </MudItem>
        <MudItem xs="12">
            <div class="d-flex justify-center">
                <MudText>Login in with email address</MudText>
            </div>
        </MudItem>
        <MudItem xs="12">
            <MudTextField T="string" Label="E-mail" Variant="Variant.Outlined"
                          @bind-Value="_tokenModel.Email" For="@(() => _tokenModel.Email)" />
        </MudItem>
        <MudItem xs="12">
            <MudTextField Label="Password" Variant="Variant.Outlined"
                          @bind-Value="_tokenModel.Password" For="@(() => _tokenModel.Password)"
                          InputType="@_passwordInput" Adornment="Adornment.End" AdornmentIcon="@_passwordInputIcon" OnAdornmentClick="TogglePasswordVisibility" />
        </MudItem>
        <MudItem xs="12" Class="d-flex justify-center">
            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Disabled="@(!Validated)" Color="Color.Primary" Size="Size.Large" Style="width: 100%;">Sign In</MudButton>
        </MudItem>
    </MudGrid>
</EditForm>

@code {

    private FluentValidationValidator _fluentValidationValidator;
    private bool Validated => _fluentValidationValidator.Validate(options => { options.IncludeAllRuleSets(); });
    private TokenRequest _tokenModel = new();

    protected override async Task OnInitializedAsync()
    {
        var state = await _stateProvider.GetAuthenticationStateAsync();
        if (state != new AuthenticationState(new ClaimsPrincipal(new ClaimsIdentity())))
        {
            _navigationManager.NavigateTo("/");
        }
    }

    private async Task SubmitAsync()
    {
        var result = await _authenticationManager.Login(_tokenModel);
        if (!result.Succeeded)
        {
            foreach (var message in result.Messages)
            {
                _snackBar.Add(message, Severity.Error);
            }
        }
    }

    private bool _passwordVisibility;
    private InputType _passwordInput = InputType.Password;
    private string _passwordInputIcon = Icons.Material.Filled.VisibilityOff;

    void TogglePasswordVisibility()
    {
        if (_passwordVisibility)
        {
            _passwordVisibility = false;
            _passwordInputIcon = Icons.Material.Filled.VisibilityOff;
            _passwordInput = InputType.Password;
        }
        else
        {
            _passwordVisibility = true;
            _passwordInputIcon = Icons.Material.Filled.Visibility;
            _passwordInput = InputType.Text;
        }
    }
}
