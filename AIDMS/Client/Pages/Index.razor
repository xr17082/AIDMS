@page "/"

<style>
    .full-height {
        height: calc(100vh - 64px);
    }

    .document-card {
        transition: all 0.3s ease;
    }

    .document-card:hover {
        transform: translateY(-2px);
        box-shadow: 0 8px 16px rgba(0,0,0,0.1);
    }

    .document-content {
        max-height: 300px;
        overflow-y: auto;
        white-space: pre-wrap;
        background-color: var(--mud-palette-background-grey);
        padding: 8px;
        border-radius: 4px;
    }

    .message-content {
        white-space: pre-wrap;
    }

    .model-select {
        max-width: 150px;
    }

    .send-button {
        height: 56px;
    }
</style>

<MudContainer MaxWidth="MaxWidth.False" Class="mt-4 full-height">
    <MudGrid Class="full-height">
        <!-- Chat Panel (Left) -->
        <MudItem xs="12" md="8" Class="d-flex flex-column full-height">
            <MudPaper Class="d-flex flex-column flex-grow-1" Elevation="4">
                <!-- Chat Header -->
                <div class="d-flex align-center pa-4 border-bottom">
                    <MudIcon Icon="@Icons.Material.Filled.Forum" Class="mr-2" />
                    <MudText Typo="Typo.h5">AI Assistant</MudText>
                </div>
                @if (IsStreaming)
                {
                    <MudCard Class="elevation-0" 
                        Style="background-color: var(--mud-palette-primary-lighten-5);">
                        <MudCardContent>
                            <div class="d-flex align-center mb-2">
                                <MudAvatar Size="Size.Small" Class="mr-2">
                                    <MudIcon Icon="@Icons.Material.Filled.SmartToy" />
                                </MudAvatar>
                            </div>
                            <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-2" />
                        </MudCardContent>
                    </MudCard>
                }
                    

                <!-- Chat Messages -->
                <div id="chat-container" class="flex-grow-1 overflow-y-auto pa-4" style="max-height: 65vh;">
                    <MudStack Gap="4">
                        @foreach (var message in ChatMessages.OrderBy(m => m.Time))
                        {
                            <MudChat ChatPosition="@message.Side">
                                <MudAvatar Icon="@message.Avatar" />
                                <MudChatHeader Name="@message.Name" Time="@message.Time.ToString("t")" />
                                <MudChatBubble>
                                    @message.Text
                                </MudChatBubble>
                            </MudChat>
                        }
                    </MudStack>
                </div>

                <!-- Input Area -->
                <div class="pa-4 border-top">
                    <div class="d-flex align-center">
                        <MudTextField @bind-Value="Prompt" 
                                        Variant="Variant.Outlined"
                                        Placeholder="Ask something..."
                                        Lines="3"
                                        Class="flex-grow-1 mr-2"
                                        OnKeyDown="@HandleKeyDown" />
                        <MudButton Variant="Variant.Filled"
                                    Color="Color.Primary"
                                    OnClick="StartStreaming"
                                    Disabled="@IsStreaming"
                                    StartIcon="@Icons.Material.Filled.Send"
                                    IconSize="Size.Medium"
                                    Class="send-button">
                            Send
                        </MudButton>
                    </div>
                    <div class="d-flex justify-end mt-1">
                        <MudText Typo="Typo.caption" Color="Color.Secondary">Press Shift+Enter for new line</MudText>
                    </div>
                </div>
            </MudPaper>
        </MudItem>

        <!-- Document Panel (Right) -->
        <MudItem xs="12" md="4" Class="d-flex flex-column full-height">
            <MudPaper Class="d-flex flex-column flex-grow-1" Elevation="4">
                <!-- Documents Header -->
                <div class="d-flex align-center pa-4 border-bottom">
                    <MudIcon Icon="@Icons.Material.Filled.Source" Class="mr-2" />
                    <MudText Typo="Typo.h5">Retrieved Documents</MudText>
                    <div class="flex-grow-1"></div>
                    <MudBadge Content="@_documents.Count" Color="Color.Primary" />
                </div>

                <!-- Documents List -->
                <div class="overflow-y-auto" style="max-height: 75vh;">
                    @if (_documents.Any())
                    {
                        <MudList T="SearchDocumentsResponse">
                            @foreach (var doc in _documents)
                            {
                                <MudListItem>
                                    <MudCard Class="mb-3 elevation-2 document-card">
                                        <MudCardContent>
                                            <div class="d-flex align-center">
                                                <MudAvatar Size="Size.Small" Color="Color.Secondary" Class="mr-2">
                                                    <MudIcon Icon="@GetFileIcon(doc.FileName)" />
                                                </MudAvatar>
                                                <div class="flex-grow-1">
                                                    <MudText Typo="Typo.subtitle1" Class="text-truncate" Style="max-width: 200px;">@doc.FileName</MudText>
                                                    <MudText Typo="Typo.caption" Color="Color.Secondary">Page @doc.PageNumber</MudText>
                                                </div>
                                                <MudButton Variant="Variant.Text" 
                                                            Color="Color.Primary" 
                                                            Icon="@Icons.Material.Filled.ContentCopy"
                                                            Size="Size.Small"
                                                            OnClick="@(() => CopyText(doc.Text))" />
                                            </div>
                                            <MudCollapse Expanded="@(expandedDocumentId == doc.GetHashCode())" Class="mt-2">
                                                <MudText Typo="Typo.body2" Class="document-content">
                                                    @doc.Text
                                                </MudText>
                                            </MudCollapse>
                                            <div class="d-flex justify-end mt-2">
                                                <MudButton Variant="Variant.Text" 
                                                            Color="Color.Primary" 
                                                            Size="Size.Small"
                                                            OnClick="@(() => ToggleDocument(doc.GetHashCode()))">
                                                    @(expandedDocumentId == doc.GetHashCode() ? "Show Less" : "Show More")
                                                </MudButton>
                                            </div>
                                        </MudCardContent>
                                    </MudCard>
                                </MudListItem>
                            }
                        </MudList>
                    }
                    else
                    {
                        <div class="d-flex flex-column align-center justify-center pa-8">
                            <MudIcon Icon="@Icons.Material.Filled.FindInPage" Size="Size.Large" Class="mb-2" />
                            <MudText Typo="Typo.h6" Class="mb-2">No documents retrieved</MudText>
                            <MudText Typo="Typo.body2" Color="Color.Secondary" Class="text-center">
                                Ask a question to retrieve relevant documents
                            </MudText>
                        </div>
                    }
                </div>
            </MudPaper>
        </MudItem>
    </MudGrid>
</MudContainer>

@code {
    // State variables
    private List<SearchDocumentsResponse> _documents = new();
    private List<ChatMessage> ChatMessages = new();
    private HubConnection? hubConnection;
    private string Prompt = "";
    private bool IsStreaming = false;
    private int expandedDocumentId = -1;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(_navigationManager.ToAbsoluteUri("/chathub"))
            .WithAutomaticReconnect()
            .Build();

        hubConnection.On<string>("ReceiveToken", (token) =>
        {
            var lastMessage = ChatMessages.LastOrDefault();
            if (lastMessage != null && lastMessage.Name == "Assistant")
            {
                lastMessage.Text += token;
            }
            else
            {
                ChatMessages.Add(new ChatMessage
                {
                    Name = "Assistant",
                    Avatar = Icons.Material.Filled.SmartToy,
                    Side = ChatBubblePosition.Start,
                    Text = token,
                    Time = DateTime.Now
                });
            }
            InvokeAsync(StateHasChanged);
            ScrollToBottom();
        });

        hubConnection.On("StreamCompleted", () =>
        {
            IsStreaming = false;
            InvokeAsync(StateHasChanged);
        });

        await hubConnection.StartAsync();
    }

    private async Task StartStreaming()
    {
        IsStreaming = true;
        if (string.IsNullOrWhiteSpace(Prompt))
        {
            IsStreaming = false;
            return;
        }

        // Add user message
        ChatMessages.Add(new ChatMessage
        {
            Name = "User",
            Avatar = Icons.Material.Filled.Person,
            Side = ChatBubblePosition.End,
            Text = Prompt,
            Time = DateTime.Now
        });

        // Clear input
        var currentPrompt = Prompt;
        Prompt = "";

        // Retrieve documents
        var response = await _documentManager.SearchDocuments(currentPrompt);
        if (response.Succeeded)
        {
            _documents = response.Data.ToList();
            expandedDocumentId = -1; // Collapse all when new docs arrive
        }

        if (hubConnection == null) return;

        // Start streaming
        await hubConnection.InvokeAsync(
            "StreamChat", 
            "user", 
            currentPrompt, 
            string.Join(" ", _documents.Select(x => x.Text)),
            MapToMessageHistory(),
            false);
        ScrollToBottom();
    }

    private void ToggleDocument(int docId)
    {
        expandedDocumentId = expandedDocumentId == docId ? -1 : docId;
    }

    private string GetFileIcon(string fileName)
    {
        var ext = Path.GetExtension(fileName).ToLower();
        return ext switch
        {
            ".pdf" => Icons.Material.Filled.PictureAsPdf,
            ".docx" => Icons.Material.Filled.Description,
            ".xlsx" => Icons.Material.Filled.TableChart,
            ".pptx" => Icons.Material.Filled.Slideshow,
            _ => Icons.Material.Filled.InsertDriveFile
        };
    }

    private async Task CopyText(string text)
    {
        await _jsRuntime.InvokeVoidAsync("navigator.clipboard.writeText", text);
    }

    private async Task ScrollToBottom()
    {
        await Task.Delay(100); // Allow render cycle to complete
        await _jsRuntime.InvokeVoidAsync("scrollToBottom", "chat-container");
    }

    private async Task HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !e.ShiftKey)
        {
            await StartStreaming();
        }
    }

    private List<Message> MapToMessageHistory()
    {
        return ChatMessages.Select(m => new Message(m.Name == "User" ? ChatRole.User : ChatRole.Assistant, m.Text)).ToList();
    }

    private record ChatMessage
    {
        public string Name { get; set; }
        public string Avatar { get; set; } = "";
        public ChatBubblePosition Side { get; set; }
        public string Text { get; set; } = "";
        public DateTime Time { get; set; }
    }
}